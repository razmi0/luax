local format_header = require("lib.luax.utils.format_header")
local get_helper    = require("lib.luax.transpiler.luax_helpers")

--- Assign ctx.emitted to the composition of preambles, headers, luax functions
--- and transpiled content together in a string[]
---@param ctx TranspilerContext
---@param cb fun(ctx : TranspilerContext)
local function emitter(ctx, cb)
    local cfg, content, emitted = ctx.config, ctx.file.content, ctx.emitted

    emitted[#emitted + 1] = format_header({
        "THIS CODE IS GENERATED BY LUAX TRANSPILER",
        "GENERATED AT: " .. cfg.DATE,
        "TRANSPILER VERSION: " .. cfg.TRANSPILER_VERSION,
        "AUTHOR: " .. cfg.AUTHOR,
        "LICENCE: " .. cfg.LICENCE,
        "REPO: " .. cfg.REPO_LINK,
    })

    emitted[#emitted + 1] = ("local %s = require(%q)\n"):format(cfg.RENDER_FUNCTION_NAME, cfg.RENDER_FUNCTION_PATH)

    for _, fn in ipairs { "map", "filter" } do
        if content:match(">.-{.-" .. fn .. "%(.-%)") then
            emitted[#emitted + 1] = get_helper(fn)
        end
    end

    cb(ctx)
end

return emitter
