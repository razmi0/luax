local luax_helpers  = require("lib.luax.transpiler.luax_helpers")
local format_header = require("lib.luax.utils.format_header")



--- Assign ctx.emitted to the composition of preambles, headers, luax functions
--- and transpiled content together in a string[]
---@param ctx TranspilerContext
---@param cb fun(ctx : TranspilerContext)
local function emitter(ctx, cb)
    local config, content, emitted = ctx.config, ctx.file.content, ctx.emitted

    emitted[#emitted + 1] = format_header({
        "THIS CODE IS GENERATED BY LUAX TRANSPILER",
        "GENERATED AT: " .. tostring(os.date("%Y-%m-%d %H:%M:%S")),
        "TRANSPILER VERSION: " .. config.headers.transpiler_version,
        "AUTHOR: " .. config.headers.author,
        "LICENCE: " .. config.headers.licence,
        "REPO: " .. config.headers.repo_link,
    })

    emitted[#emitted + 1] =
        ("local %s = require(%q)\n"):format(config.render_function_name, config.render_function_path)

    for _, fn in ipairs { "map", "filter" } do
        if content:match(">.-{.-" .. fn .. "%(.-%)") then
            emitted[#emitted + 1] = luax_helpers(fn)
        end
    end

    cb(ctx)

    local function replace_aliases(path)
        for _, entry in ipairs(config.alias) do
            local alias = entry.alias:gsub("([^%w])", "%%%1")
            path = path:gsub("^" .. alias, entry.path)
        end
        return path
    end

    for i = 1, #emitted do
        emitted[i] = emitted[i]:gsub(
            'require%s*%(%s*"(.-)"%s*%)',
            function(inner)
                return 'require("' .. replace_aliases(inner) .. '")'
            end
        )
    end
end

return emitter
